The project involves building a RAG-based chatbot for Swedish legal documents, with scraping as an initial step since no pre-extracted dataset is provided. #### 1. **Project Scope and Functionality** - **Core Objective**: Develop a retrieval-based AI chatbot (RAG or document-trained) that responds accurately using a dataset of Swedish legal documents (SFS, which are laws and regulations). - **Dataset Details**: - Approximately 5,542 documents (initially mentioned as 5-10k, refined to 5.5k, then exactly 5,542). - Source: Website at https://www.riksdagen.se/sv/sok/?avd=dokument&doktyp=sfs&dokstat=gällande+sfs (filters set for currently valid SFS). - Documents are likely PDFs or web content; the developer must scrape the site to extract them (20 items per page, ~300 pages of pagination). - No pre-extracted data provided; scraping is the developer's responsibility. - **Bot Behavior and Constraints**: - Respond **only based on the provided legal documents**; no guessing, hallucinations, or unrelated answers. - If information isn't found in the dataset, clearly state that it cannot answer. - Handle **only law-related questions**; politely decline anything outside legal scope or unsupported by data. - Maintain a **professional, factual tone** at all times. - **Citations**: Include citation references or footnotes in **every answer**, with clickable links leading to the source document URL. - **Language Support**: - Primarily in **Swedish** for best accuracy (since it's Swedish law). - English as a secondary option (included for developer's understanding/context, but Swedish preferred to reduce errors). - **User Interface**: Simple UI for testing the prototype (e.g., Streamlit or basic HTML page) so the client can input questions and see responses. - **Additional Features**: - Final bot may have "some more requirements" (not specified yet, but client implies expansions post-prototype). - Integration potential: Backend API that can be managed via a front-end dashboard and integrated into applications (e.g., website chatbot). #### 2. **Technical Specifications** - **Architecture**: - Backend: FastAPI or Flask. - Vector Database: ChromaDB. - Embedding: Process files (PDFs) individually or in bulk for querying. - **LLM/Model**: - Use **Gemini** (Google's model) for the prototype, leveraging $300 free credit. - Client notes Gemini is slower than OpenAI but prioritizes accuracy over speed. - Developer suggested OpenAI initially but agreed to Gemini; client open to switching if needed post-prototype. - **Infrastructure and Costs**: - Client expects low ongoing costs, especially for the DB (e.g., not $200-300/month). - Developer to find a "reasonable DB option." - Client will provide infrastructure post-MVP (after prototype approval and payment). - **Development Approach**: - Build an MVP (Minimum Viable Product) prototype first for testing. - Scraping is a key initial task; developer must confirm if the site can be scraped via general methods. #### 3. **Budget and Payment Terms** - **Development Cost**: Settled at $100 fixed, with potential tip if the resut is amazing. - Includes scraping, backend development, embedding, and simple UI. - **Ongoing Costs**: Low fixed monthly for DB/infra (client can't afford high amounts). #### 4. **Timeline and Process** - **Prototype Timeline**: 1-2 days (developer aims to provide updates before Sunday; scraping may take extra time due to volume). - **Communication**: - Daily updates requested. - **Testing**: - wants to test the prototype personally (write own questions, verify accuracy). - Prototype must demonstrate core accuracy, citations, and language handling. ### Summary of Requirements - **Project**: Build a RAG-based AI chatbot for querying 5,542 Swedish legal documents (SFS) scraped from https://www.riksdagen.se/sv/sok/?avd=dokument&doktyp=sfs&dokstat=gällande+sfs. - **Key Features**: Accurate responses from dataset only; no hallucinations; law-related questions in Swedish (English secondary); professional tone; citations/footnotes with clickable source links in every answer; decline non-legal/unsupported queries. - **Tech Stack**: Backend (FastAPI/Flask), ChromaDB vector DB, Gemini LLM (free credit for prototype); simple UI (Streamlit/HTML) for testing. - **Process**: Scrape data first; build/test prototype in 1-2 days with daily updates; - **Budget**: $100 fixed for development (including scraping); low monthly DB costs. - **Constraints**: tests prototype; potential expansions post-MVP.